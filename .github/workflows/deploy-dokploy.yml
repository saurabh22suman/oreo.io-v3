name: Deploy to Dokploy

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:
    inputs:
      context:
        description: "Docker build context (default: ./go-service)"
        required: false
        default: "./go-service"
      dockerfile:
        description: "Path to Dockerfile (default: ./go-service/Dockerfile)"
        required: false
        default: "./go-service/Dockerfile"
      tag:
        description: "Optional image tag override (default: commit SHA)"
        required: false

permissions:
  contents: read
  packages: write

concurrency:
  group: dokploy-${{ github.ref_name }}
  cancel-in-progress: true

jobs:
  build_and_push:
    name: Build and Push Image
    runs-on: ubuntu-latest
    outputs:
      image_ref: ${{ steps.meta.outputs.image_ref }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Compute image metadata
        id: meta
        shell: bash
        run: |
          set -euo pipefail
          CONTEXT="${{ github.event.inputs.context || '' }}"
          DOCKERFILE="${{ github.event.inputs.dockerfile || '' }}"
          TAG_IN="${{ github.event.inputs.tag || '' }}"
          # Defaults for push events
          if [ -z "$CONTEXT" ]; then CONTEXT="./go-service"; fi
          if [ -z "$DOCKERFILE" ]; then DOCKERFILE="./go-service/Dockerfile"; fi
          if [ -z "$TAG_IN" ]; then TAG_IN="${{ github.sha }}"; fi
          IMAGE_REF="ghcr.io/${{ secrets.GHCR_USERNAME }}/${{ github.event.repository.name }}:${TAG_IN}"
          echo "context=$CONTEXT" >> "$GITHUB_OUTPUT"
          echo "dockerfile=$DOCKERFILE" >> "$GITHUB_OUTPUT"
          echo "tag=$TAG_IN" >> "$GITHUB_OUTPUT"
          echo "image_ref=$IMAGE_REF" >> "$GITHUB_OUTPUT"
          echo "Will build $IMAGE_REF from context=$CONTEXT, dockerfile=$DOCKERFILE"

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ secrets.GHCR_USERNAME }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push image
        uses: docker/build-push-action@v5
        with:
          context: ${{ steps.meta.outputs.context }}
          file: ${{ steps.meta.outputs.dockerfile }}
          push: true
          tags: ${{ steps.meta.outputs.image_ref }}
          provenance: false

  deploy_to_dokploy:
    name: Deploy to Dokploy
    runs-on: ubuntu-latest
    needs: build_and_push
    steps:
      - name: Trigger Dokploy deployment
        env:
          DOKPLOY_URL: ${{ secrets.DOKPLOY_URL }}
          DOKPLOY_PROJECT_ID: ${{ secrets.DOKPLOY_PROJECT_ID }}
          DOKPLOY_API_TOKEN: ${{ secrets.DOKPLOY_API_TOKEN }}
          IMAGE_REF: ${{ needs.build_and_push.outputs.image_ref }}
        shell: bash
        run: |
          set -euo pipefail
          if [ -z "${DOKPLOY_URL:-}" ] || [ -z "${DOKPLOY_PROJECT_ID:-}" ] || [ -z "${DOKPLOY_API_TOKEN:-}" ]; then
            echo "Missing one or more Dokploy secrets (DOKPLOY_URL, DOKPLOY_PROJECT_ID, DOKPLOY_API_TOKEN)" >&2
            exit 1
          fi
          echo "Deploying image $IMAGE_REF to Dokploy project $DOKPLOY_PROJECT_ID at $DOKPLOY_URL"
          curl -fsSL -X POST "$DOKPLOY_URL/api/deploy" \
            -H "Authorization: Bearer $DOKPLOY_API_TOKEN" \
            -H "Content-Type: application/json" \
            --data "{\"project_id\":\"$DOKPLOY_PROJECT_ID\",\"image\":\"$IMAGE_REF\"}" \
            -o response.json
          echo "Dokploy response:" && cat response.json

# Required repository secrets:
# - GHCR_USERNAME
# - GHCR_TOKEN
# - DOKPLOY_URL
# - DOKPLOY_PROJECT_ID
# - DOKPLOY_API_TOKEN
